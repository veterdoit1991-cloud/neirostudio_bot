import os, io, json, uuid
from pathlib import Path
from PIL import Image
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ---------- –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True, parents=True)
USERS_JSON = DATA_DIR / "users.json"

# ---------- –ø—Ä–æ—Å—Ç–∞—è "–ë–î" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----------
def load_db():
    if USERS_JSON.exists():
        try:
            return json.loads(USERS_JSON.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_db(db):
    USERS_JSON.write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")

DB = load_db()  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { str(user_id): {"refs": [paths], "awaiting_refs": bool} }

# ---------- —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----------
TXT_WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ENS ‚Äî –Ω–µ–π—Ä–æ-—Å—Ç—É–¥–∏—è.\n\n"
    "1) –°–Ω–∞—á–∞–ª–∞ **–∑–∞–≥—Ä—É–∑–∏ 1‚Äì3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ** (–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω, —Ö–æ—Ä–æ—à–∏–π —Å–≤–µ—Ç, —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã). "
    "–Ø –∑–∞–ø–æ–º–Ω—é —Ç–≤–æ–∏ —á–µ—Ä—Ç—ã.\n"
    "2) –ó–∞—Ç–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ **¬´üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª** –ø—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å** (–ø–æ–∑–∞/—Å–≤–µ—Ç) "
    "–∏/–∏–ª–∏ **–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç** ‚Äî —è —Å–¥–µ–ª–∞—é **—Å–µ—Ä–∏—é –∏–∑ 4 –∫–∞–¥—Ä–æ–≤**.\n\n"
    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
)

TXT_NEED_REFS = (
    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ **–º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ** –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ (–ª—É—á—à–µ 2‚Äì3 —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–∞). "
    "–ù–∞–∂–º–∏—Ç–µ **¬´‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª** –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–∫–∏."
)

TXT_AFTER_REF_ADDED = (
    "–ì–æ—Ç–æ–≤–æ! –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë {left} —à—Ç. (–¥–æ 3). "
    "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ **¬´üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª**."
)

TXT_REFS_DONE = (
    "–û—Ç–ª–∏—á–Ω–æ! 3 —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n"
    "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ **¬´üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª** –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç.\n"
    "–Ø —Å–æ–∑–¥–∞–º **4 –∫–∞–¥—Ä–∞** —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ä–∞–∫—É—Ä—Å–∞–º–∏."
)

TXT_GENERATE_HINT = (
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ **—Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å** (–ø–æ–∑–∞/—Å–≤–µ—Ç) –∏/–∏–ª–∏ **—Ç–µ–∫—Å—Ç**.\n\n"
    "–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Äî —è —Å–∞–º–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–º—Ç –∏ —Å–¥–µ–ª–∞—é **4 –∫–∞–¥—Ä–∞**:\n"
    "1) –º—è–≥–∫–∞—è —É–ª—ã–±–∫–∞, —Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω\n"
    "2) –¥–µ—Ä–∑–∫–∏–π –≤–∑–≥–ª—è–¥, 3/4 —Ä–∞–∫—É—Ä—Å\n"
    "3) —Å–º–µ—Ö, –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –∫–∞–¥—Ä\n"
    "4) –Ω–µ–∂–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω"
)

TXT_GEN_NOT_CONFIGURED = (
    "üîß –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
    "–ü–æ–¥–∫–ª—é—á–∏ API –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `run_generation()` –≤ main.py."
)

# ---------- –∫–Ω–æ–ø–∫–∏ ----------
def main_menu():
    kb = [
        [InlineKeyboardButton("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload_refs")],
        [InlineKeyboardButton("üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
        [InlineKeyboardButton("üñº –ú–æ–∏ —Ñ–æ—Ç–æ", callback_data="my_refs"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(kb)

def refs_menu():
    kb = [
        [InlineKeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="upload_refs")],
        [InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="show_refs")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="clear_refs")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]
    ]
    return InlineKeyboardMarkup(kb)

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def ensure_user(uid: int):
    key = str(uid)
    if key not in DB:
        DB[key] = {"refs": [], "awaiting_refs": False}
        save_db(DB)
    return DB[key]

def save_photo_bytes(b: bytes, folder: Path) -> Path:
    folder.mkdir(parents=True, exist_ok=True)
    fname = f"{uuid.uuid4().hex}.jpg"
    fpath = folder / fname
    Image.open(io.BytesIO(b)).convert("RGB").save(fpath, "JPEG", quality=95)
    return fpath

# ---------- —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–º—Ç-–ø—É–ª (4 –≤–∞—Ä–∏–∞—Ü–∏–∏) ----------
def build_internal_prompts(user_text: str | None):
    base_prompts = [
        "soft natural smile, warm studio light, fashion portrait, realistic skin, cinematic depth",
        "confident gaze, 3/4 angle, elegant posture, editorial lighting, modern mood",
        "laughing gently, relaxed pose, golden tones, soft contrast, wider frame",
        "serene expression, head turned aside, close-up, smooth light and shadow"
    ]
    if user_text:
        return [f"{user_text}, {p}" for p in base_prompts]
    return base_prompts

# ---------- –∑–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å—é–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—à—å API) ----------
def run_generation(ref_images: list[Path], style_image: Path | None, prompts: list[str]) -> list[bytes] | None:
    """
    –ü–æ–¥–∫–ª—é—á–∏ —Å—é–¥–∞ —Å–≤–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (Seedream / Replicate / –∏ —Ç.–¥.).
    –í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 4 –∫–∞—Ä—Ç–∏–Ω–æ–∫ (bytes).
    –°–µ–π—á–∞—Å ‚Äî –∑–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —á—Ç–æ–±—ã –±–æ—Ç —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.
    """
    return None

# ================== HANDLERS ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id)
    if update.message:
        await update.message.reply_text(TXT_WELCOME, reply_markup=main_menu())

async def on_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    u = ensure_user(uid)

    if q.data == "upload_refs":
        u["awaiting_refs"] = True
        save_db(DB)
        await q.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ **1‚Äì3 —Ñ–æ—Ç–æ** –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ (–ª—É—á—à–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã). "
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏—Ö –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.",
            reply_markup=main_menu()
        )

    elif q.data == "generate":
        if len(u["refs"]) == 0:
            await q.edit_message_text(TXT_NEED_REFS, reply_markup=main_menu())
        else:
            await q.edit_message_text(TXT_GENERATE_HINT, reply_markup=main_menu())

    elif q.data == "my_refs":
        await q.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º–∏:", reply_markup=refs_menu())

    elif q.data == "show_refs":
        refs = [Path(p) for p in u["refs"]]
        if not refs:
            await q.edit_message_text("–ï—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´üì§ –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å¬ª.", reply_markup=refs_menu())
            return
        media = []
        for i, p in enumerate(refs[:10]):
            with open(p, "rb") as f:
                img = f.read()
            media.append(InputMediaPhoto(img, caption=f"ref {i+1}"))
        await q.message.reply_media_group(media)
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=refs_menu())

    elif q.data == "clear_refs":
        for p in list(u["refs"]):
            try:
                Path(p).unlink(missing_ok=True)
            except Exception:
                pass
        u["refs"] = []
        save_db(DB)
        await q.edit_message_text("–í—Å–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã —É–¥–∞–ª–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ 1‚Äì3 —Ñ–æ—Ç–æ.", reply_markup=main_menu())

    elif q.data == "back_home":
        await q.edit_message_text(TXT_WELCOME, reply_markup=main_menu())

    elif q.data == "help":
        await q.edit_message_text(
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ 1‚Äì3 —Ñ–æ—Ç–æ –ª–∏—Ü–∞ (–∫—Ä—É–ø–Ω–æ, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤).\n"
            "‚Ä¢ –í ¬´üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è —Å–æ–∑–¥–∞–º —Å–µ—Ä–∏—é –∏–∑ 4 –∫–∞–¥—Ä–æ–≤.\n"
            "‚Ä¢ ¬´üñº –ú–æ–∏ —Ñ–æ—Ç–æ¬ª ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ä–µ—Ñ—ã.\n\n"
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ `run_generation()`.",
            reply_markup=main_menu()
        )

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = ensure_user(uid)

    # –∫–∞—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    b = await file.download_as_bytearray()

    # –µ—Å–ª–∏ –∂–¥—ë–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ 3 —à—Ç.
    if u.get("awaiting_refs", False) or len(u["refs"]) < 3:
        user_dir = DATA_DIR / str(uid) / "refs"
        fpath = save_photo_bytes(b, user_dir)
        u.setdefault("refs", []).append(str(fpath))
        u["awaiting_refs"] = len(u["refs"]) < 3  # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å, –ø–æ–∫–∞ <3
        save_db(DB)
        left = 3 - len(u["refs"])
        if left > 0:
            await update.message.reply_text(TXT_AFTER_REF_ADDED.format(left=left))
        else:
            await update.message.reply_text(TXT_REFS_DONE)
        return

    # –∏–Ω–∞—á–µ ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ style-image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    style_dir = DATA_DIR / str(uid) / "style_inputs"
    style_path = save_photo_bytes(b, style_dir)
    context.user_data["last_style_image"] = str(style_path)
    await update.message.reply_text("–§–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à–∏—Ç–µ ¬´/go¬ª —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–∏—é –∏–∑ 4 –∫–∞–¥—Ä–æ–≤.")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç
    context.user_data["last_text"] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ ¬´/go¬ª, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 4 –∫–∞–¥—Ä–∞.")

async def cmd_go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = ensure_user(uid)
    if len(u["refs"]) == 0:
        await update.message.reply_text(TXT_NEED_REFS)
        return

    user_text = context.user_data.get("last_text")
    style_image_path = context.user_data.get("last_style_image")
    prompts = build_internal_prompts(user_text)

    await update.message.reply_text("‚ú® –î–µ–ª–∞—é —Å–µ—Ä–∏—é –∏–∑ 4 –∫–∞–¥—Ä–æ–≤‚Ä¶")

    imgs = run_generation(
        ref_images=[Path(p) for p in u["refs"]],
        style_image=Path(style_image_path) if style_image_path else None,
        prompts=prompts
    )
    if not imgs:
        await update.message.reply_text(TXT_GEN_NOT_CONFIGURED)
        return

    media = [InputMediaPhoto(imgs[0], caption="–ö–∞–¥—Ä 1")]
    for i in range(1, min(4, len(imgs))):
        media.append(InputMediaPhoto(imgs[i], caption=f"–ö–∞–¥—Ä {i+1}"))
    await update.message.reply_media_group(media)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("go", cmd_go))  # –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–∞–Ω–Ω—ã–º
    app.add_handler(CallbackQueryHandler(on_buttons))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

